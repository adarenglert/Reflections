1.What happens when you initialize a repository? Why do you need to do it?
when you intialize a repo the .git dir is created, and you do it to start controlling your versions.
2.How is the staging area different from the working directory and the repository? What value do you think it offers?
the staging area is diffrent from the working dir and the repo, because it's not an acutal dir, it's a process. it lets control which file will be commited.
3.How can you use the staging area to make sure you have one commit per logical change?
when adding the changes to the staging area you need to make sure that the changes you made to the file are only 1 logical change.
4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
while developing new language for the app, testing new features, etc. youd like to save the master version and try diffrent process.
5.How do the diagrams help you visualize the branch structure?
it shows the timeline of commits and changes, and define between one branch to another which let you id what changes on what branch made at what time.
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
the result is on combined branch that have all the commits from both of the merged branches
7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
sometimes automatic merge requiers high proccesing power to analize what are the changes between to version of the file, while someone who know the code could solve the problem quiet easily and quick.